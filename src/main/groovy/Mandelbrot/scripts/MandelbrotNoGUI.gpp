package Mandelbrot.scripts

import Mandelbrot.data.Mcollect
import Mandelbrot.data.Mdata
import groovy_parallel_patterns.connectors.reducers.AnyFanOne
import groovy_parallel_patterns.connectors.spreaders.OneFanAny
import groovy_parallel_patterns.functionals.groups.AnyGroupAny
import groovy_parallel_patterns.terminals.Collect
import groovy_parallel_patterns.terminals.Emit
import groovy_parallel_patterns.*

int workers
int maxIterations          // 100
int width                  //1400    700        350 in pixels  2800
//int height                 //800     400        200 in pixels  1600


if (args.size() == 0){
    workers = 16
}
else {
     workers = Integer.parseInt(args[0])
}
maxIterations = 1000
width = 5600

System.gc()

print "noGUI, $width, $maxIterations, $workers, "
long startTime = System.currentTimeMillis()

def emitDetails = new DataDetails(dName: Mdata.getName(),
                  dInitMethod: Mdata.initialiseClass,
                  dInitData: [width, maxIterations],
                  dCreateMethod: Mdata.createInstance)

def resultDetails = new ResultDetails(rName: Mcollect.getName(),
                    rInitMethod: Mcollect.init,
                    rCollectMethod: Mcollect.collector,
                    rFinaliseMethod: Mcollect.finalise)

def emit = new Emit(eDetails: emitDetails)

def spread = new OneFanAny(destinations: workers)

def group = new AnyGroupAny (function: Mdata.calculate,
                workers: workers)

def reduce = new AnyFanOne ( sources: workers)

def collector = new Collect(rDetails: resultDetails)

def endtime = System.currentTimeMillis()
print "${endtime - startTime} \n"

package Mandelbrot.scripts

import Mandelbrot.data.Mcollect
import Mandelbrot.data.Mdata
import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.cluster.connectors.NodeRequestingFanAny
import groovy_parallel_patterns.cluster.connectors.OneNodeRequestedList
import groovy_parallel_patterns.connectors.reducers.AnyFanOne
import groovy_parallel_patterns.functionals.groups.AnyGroupAny
import groovy_parallel_patterns.terminals.Collect
import groovy_parallel_patterns.terminals.Emit


int cores = 4  // number of workers on each node
int clusters = 4 // number of clusters
int maxIterations = 1000 // escape value
int width  = 5600                //1400   700        350

//@emit 146.176.165.152
def emitDetails = new DataDetails(
    dName: Mdata.getName(),
    dInitMethod: Mdata.initialiseClass,
    dInitData: [width, maxIterations],
    dCreateMethod: Mdata.createInstance )
def emit = new Emit (
    eDetails: emitDetails )
def onrl = new OneNodeRequestedList()

//@cluster clusters
def nrfa = new NodeRequestingFanAny( destinations: cores )
def group = new AnyGroupAny(
    workers: cores,
    function: Mdata.calculate )
def afo1 = new AnyFanOne( sources: cores )

//@collect
def resultDetails = new ResultDetails(
    rName: Mcollect.getName(),
    rInitMethod: Mcollect.init,
    rCollectMethod: Mcollect.collector,
    rFinaliseMethod: Mcollect.finalise )
def afo = new AnyFanOne( sources: clusters )
def collector = new Collect( rDetails: resultDetails )

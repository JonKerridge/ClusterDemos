package Mandelbrot.scripts

import Mandelbrot.data.Mdata
import Mandelbrot.data.Mgui
import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.cluster.connectors.NodeRequestingFanAny
import groovy_parallel_patterns.cluster.connectors.OneNodeRequestedList
import groovy_parallel_patterns.connectors.reducers.AnyFanOne
import groovy_parallel_patterns.functionals.groups.AnyGroupAny
import groovy_parallel_patterns.terminals.CollectUI
import groovy_parallel_patterns.terminals.Emit
import java.awt.Color

int cores = 4  // number of workers on each node
int clusters = 1 // number of clusters
int maxIterations = 100
int width  = 350                //1400   700   350
int height = 200                // 800   400   200

//@emit 192.168.1.176

def emitDetails = new DataDetails(
    dName: Mdata.getName(),
    dInitMethod: Mdata.initialiseClass,
    dInitData: [width, maxIterations],
    dCreateMethod: Mdata.createInstance
)
def emit = new Emit (
    eDetails: emitDetails
)
def onrl = new OneNodeRequestedList()

//@cluster clusters

def nrfa = new NodeRequestingFanAny(
    destinations: cores
)
def group = new AnyGroupAny(
    workers: cores,
    function: Mdata.calculate
)
def afo1 = new AnyFanOne(
    sources: cores )

//@collect

def resultDetails = new ResultDetails(
    rName: Mgui.getName(),
    rInitMethod: Mgui.init,
    rInitData: [width, height, Color.CYAN],
    rCollectMethod: Mgui.updateDisplay,
    rFinaliseMethod: Mgui.finalise
)
def afo = new AnyFanOne(
    sources: clusters
)
def collector = new CollectUI(
    guiDetails: resultDetails
)
